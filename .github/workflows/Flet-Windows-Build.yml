name: Flet Multi-Platform Build

on:
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      test_version:
        description: 'Test version number'
        required: true
        default: 'v0.1.0-test'

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          architecture: x64

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'
          channel: 'stable'

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync
          uv add flet

      - name: Build with flet
        run: |
          if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            $VERSION = "${{ github.event.inputs.test_version }}"
          } else {
            $VERSION = "${{ github.ref_name }}"
          }
          
          $env:PYTHONIOENCODING = "utf-8"
          $env:PYTHONUTF8 = "1"
          
          uv run flet build windows --build-version $VERSION
        shell: powershell

      - name: Install Inno Setup
        run: |
          choco install innosetup -y
        shell: powershell

      - name: Create Inno Setup script
        shell: powershell
        run: |
          $version = if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            "${{ github.event.inputs.test_version }}"
          } else {
            "${{ github.ref_name }}"
          }
          
          $versionClean = $version -replace '^v', ''
          
          $innoScript = @"
          [Setup]
          AppName=SwissKit
          AppVersion=$versionClean
          AppPublisher=Your Company Name
          AppPublisherURL=https://github.com/${{ github.repository }}
          AppSupportURL=https://github.com/${{ github.repository }}/issues
          AppUpdatesURL=https://github.com/${{ github.repository }}/releases
          DefaultDirName={autopf}\SwissKit
          DefaultGroupName=SwissKit
          UninstallDisplayName=SwissKit
          Compression=lzma2
          SolidCompression=yes
          OutputDir=installer
          OutputBaseFilename=SwissKit-Setup-$versionClean
          WizardStyle=modern
          PrivilegesRequired=admin
          PrivilegesRequiredOverridesAllowed=commandline dialog
          ArchitecturesAllowed=x64compatible
          ArchitecturesInstallIn64BitMode=x64compatible
          DisableDirPage=no
          DisableProgramGroupPage=no
          ExtraDiskSpaceRequired=104857600
          AllowCancelDuringInstall=yes
          AppId={{A1B2C3D4-E5F6-7890-ABCD-EF1234567890}
          VersionInfoVersion=$versionClean
          VersionInfoDescription=SwissKit Application
          UninstallDisplayIcon={app}\SwissKit.exe
          SetupMutex=SwissKitSetupMutex
          AppMutex=SwissKitAppMutex
          
          [Languages]
          Name: "english"; MessagesFile: "compiler:Default.isl"
          
          [Tasks]
          Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
          Name: "quicklaunchicon"; Description: "{cm:CreateQuickLaunchIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked; OnlyBelowVersion: 6.1; Check: not IsAdminInstallMode
          
          [Files]
          Source: "build\windows\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
          
          [Icons]
          Name: "{group}\SwissKit"; Filename: "{app}\SwissKit.exe"
          Name: "{group}\{cm:UninstallProgram,SwissKit}"; Filename: "{uninstallexe}"
          Name: "{autodesktop}\SwissKit"; Filename: "{app}\SwissKit.exe"; Tasks: desktopicon
          Name: "{userappdata}\Microsoft\Internet Explorer\Quick Launch\SwissKit"; Filename: "{app}\SwissKit.exe"; Tasks: quicklaunchicon
          
          [Run]
          Filename: "{app}\SwissKit.exe"; Description: "{cm:LaunchProgram,SwissKit}"; Flags: nowait postinstall skipifsilent
          
          [UninstallDelete]
          Type: filesandordirs; Name: "{app}"
          
          [Code]
          function IsUpgrade(): Boolean;
          var
            PrevVersion: String;
          begin
            PrevVersion := GetPreviousData('Version', '');
            Result := (PrevVersion <> '');
          end;
          
          function ShouldSkipPage(PageID: Integer): Boolean;
          begin
            Result := False;
            if IsUpgrade() then
            begin
              case PageID of
                wpSelectDir: Result := True;
                wpSelectProgramGroup: Result := True;
              end;
            end;
          end;
          
          function InitializeSetup(): Boolean;
          var
            PrevVersion: String;
            CurVersion: String;
          begin
            Result := True;
            PrevVersion := GetPreviousData('Version', '');
            CurVersion := '$versionClean';
            
            if PrevVersion <> '' then
            begin
              if MsgBox('SwissKit version ' + PrevVersion + ' is already installed. ' +
                        'Do you want to upgrade to version ' + CurVersion + '?', 
                        mbConfirmation, MB_YESNO) = IDNO then
              begin
                Result := False;
              end;
            end;
          end;
          
          procedure RegisterPreviousData(PreviousDataKey: Integer);
          begin
            SetPreviousData(PreviousDataKey, 'Version', '$versionClean');
          end;
          "@
          
          New-Item -ItemType Directory -Path "installer" -Force
          $innoScript | Out-File -FilePath "swisskit.iss" -Encoding UTF8

      - name: Build installer
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" "swisskit.iss"
        shell: powershell

      - name: Package builds
        shell: powershell
        run: |
          $version = if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            "${{ github.event.inputs.test_version }}"
          } else {
            "${{ github.ref_name }}"
          }
          
          $artifactName = "swisskit-windows-x64-$version"
          
          # Create ZIP package
          New-Item -ItemType Directory -Path "release\$artifactName" -Force
          Copy-Item -Path "build\windows\*" -Destination "release\$artifactName" -Recurse
          Compress-Archive -Path "release\$artifactName" -DestinationPath "build\$artifactName.zip"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: |
            build/*.zip
            installer/*.exe

  build-linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'
          channel: 'stable'

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build libgtk-3-dev libblkid-dev liblzma-dev

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: Install Python dependencies
        run: |
          uv sync
          uv add flet

      - name: Build with flet
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.test_version }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          
          export PYTHONIOENCODING="utf-8"
          export PYTHONUTF8="1"
          
          uv run flet build linux --build-version $VERSION

      - name: Package builds
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.test_version }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          
          ARTIFACT_NAME="swisskit-linux-x64-$VERSION"
          
          # Create tarball
          mkdir -p release
          cd build/linux
          tar -czf "../../release/$ARTIFACT_NAME.tar.gz" *
          cd ../..

      - name: Create AppImage
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.test_version }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          
          VERSION_CLEAN=${VERSION#v}
          
          # Install required tools
          sudo apt-get update
          sudo apt-get install -y imagemagick
          
          # Download AppImage tools
          wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage
          
          # Create AppDir structure
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/share/applications
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          
          # Copy application files
          cp -r build/linux/* AppDir/usr/bin/
          
          # Create desktop file
          cat > AppDir/usr/share/applications/swisskit.desktop << EOF
          [Desktop Entry]
          Name=SwissKit
          Exec=SwissKit
          Icon=swisskit
          Type=Application
          Categories=Utility;
          Comment=SwissKit Application
          EOF
          
          # Create AppRun script
          cat > AppDir/AppRun << 'EOF'
          #!/bin/bash
          SELF=$(readlink -f "$0")
          HERE=${SELF%/*}
          export PATH="${HERE}/usr/bin/:${PATH}"
          export LD_LIBRARY_PATH="${HERE}/usr/lib/:${HERE}/usr/lib/x86_64-linux-gnu/:${LD_LIBRARY_PATH}"
          cd "${HERE}/usr/bin"
          exec "${HERE}/usr/bin/SwissKit" "$@"
          EOF
          
          chmod +x AppDir/AppRun
          chmod +x AppDir/usr/bin/SwissKit
          
          # Create a default icon (required for AppImage)
          # Check if custom icon exists, otherwise create a placeholder
          if [ -f "assets/icon.png" ]; then
            cp assets/icon.png AppDir/usr/share/icons/hicolor/256x256/apps/swisskit.png
          else
            # Create a simple placeholder icon
            convert -size 256x256 xc:white \
              -fill '#2196F3' -draw "rectangle 32,32 224,224" \
              -fill white -pointsize 120 -gravity center -annotate +0+0 'S' \
              AppDir/usr/share/icons/hicolor/256x256/apps/swisskit.png
          fi
          
          # Copy icon to AppDir root (required by some AppImage versions)
          cp AppDir/usr/share/icons/hicolor/256x256/apps/swisskit.png AppDir/swisskit.png
          
          # Create .DirIcon symlink (required for AppImage)
          ln -s swisskit.png AppDir/.DirIcon
          
          # Ensure release directory exists
          mkdir -p release
          
          # Build AppImage with verbose output for debugging
          ./appimagetool-x86_64.AppImage --verbose AppDir "release/SwissKit-$VERSION_CLEAN-x86_64.AppImage" || {
            echo "AppImage build failed. Checking AppDir structure:"
            find AppDir -type f | head -20
            exit 1
          }

      - name: Create DEB package
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.test_version }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          
          VERSION_CLEAN=${VERSION#v}
          
          # Create debian package structure
          mkdir -p deb/DEBIAN
          mkdir -p deb/usr/bin
          mkdir -p deb/usr/share/applications
          mkdir -p deb/usr/share/doc/swisskit
          mkdir -p deb/usr/share/icons/hicolor/256x256/apps
          
          # Copy application files
          cp -r build/linux/* deb/usr/bin/
          chmod +x deb/usr/bin/SwissKit
          
          # Create control file
          cat > deb/DEBIAN/control << EOF
          Package: swisskit
          Version: $VERSION_CLEAN
          Section: utils
          Priority: optional
          Architecture: amd64
          Maintainer: Your Name <your.email@example.com>
          Description: SwissKit Application
           A multi-tool application built with Flet
          EOF
          
          # Create desktop file
          cat > deb/usr/share/applications/swisskit.desktop << EOF
          [Desktop Entry]
          Name=SwissKit
          Exec=/usr/bin/SwissKit
          Icon=swisskit
          Type=Application
          Categories=Utility;
          Comment=SwissKit Application
          EOF
          
          # Create or copy icon
          if [ -f "assets/icon.png" ]; then
            cp assets/icon.png deb/usr/share/icons/hicolor/256x256/apps/swisskit.png
          else
            # Create a simple placeholder icon using ImageMagick
            convert -size 256x256 xc:white \
              -fill '#2196F3' -draw "rectangle 32,32 224,224" \
              -fill white -pointsize 120 -gravity center -annotate +0+0 'S' \
              deb/usr/share/icons/hicolor/256x256/apps/swisskit.png
          fi
          
          # Create copyright file
          cat > deb/usr/share/doc/swisskit/copyright << EOF
          Format: https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
          Upstream-Name: SwissKit
          Source: https://github.com/${{ github.repository }}
          
          Files: *
          Copyright: 2024 Your Name
          License: MIT
          EOF
          
          # Build DEB package
          dpkg-deb --build deb
          mv deb.deb "release/swisskit_${VERSION_CLEAN}_amd64.deb"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: |
            release/*.tar.gz
            release/*.AppImage
            release/*.deb

  release:
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-build
          path: artifacts/windows/

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-build
          path: artifacts/linux/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.test_version || github.ref_name }}
          name: SwissKit Release ${{ github.event.inputs.test_version || github.ref_name }}
          files: |
            artifacts/**/*
          body: |
            ## Download Instructions
            
            ### 🪟 Windows
            
            #### Recommended (Installer)
            - **SwissKit-Setup-[version].exe** - Windows Installer
              - Automatically installs to system
              - Creates desktop and start menu shortcuts
              - Supports one-click uninstall
              - Best for regular use
            
            #### Portable Version (ZIP)
            - **swisskit-windows-x64-[version].zip** - Portable version
              - Extract and run
              - No system modifications
              - Best for testing or temporary use
            
            ### 🐧 Linux
            
            #### AppImage (Recommended for most distributions)
            - **SwissKit-[version]-x86_64.AppImage** - Universal Linux package
              - Works on most Linux distributions
              - No installation required
              - Just download, make executable, and run
            
            #### DEB Package (For Debian/Ubuntu)
            - **swisskit_[version]_amd64.deb** - Debian package
              - For Debian, Ubuntu, and derivatives
              - Installs with system package manager
              - Integrates with desktop environment
            
            #### Tarball (Manual installation)
            - **swisskit-linux-x64-[version].tar.gz** - Compressed archive
              - Extract to any location
              - For advanced users or custom setups
            
            ### Installation Instructions
            
            #### Windows Installer:
            1. Download the `.exe` installer file
            2. Double-click to run the installer
            3. Follow the setup wizard
            4. Launch from desktop or start menu
            
            #### Linux AppImage:
            ```bash
            chmod +x SwissKit-*.AppImage
            ./SwissKit-*.AppImage
            ```
            
            #### Linux DEB Package:
            ```bash
            sudo dpkg -i swisskit_*.deb
            # Or double-click in file manager
            ```
            
            #### Linux Tarball:
            ```bash
            tar -xzf swisskit-linux-x64-*.tar.gz
            cd swisskit-linux-x64-*/
            ./SwissKit
            ```
            
            ### System Requirements
            - **Windows**: Windows 10/11 (x64)
            - **Linux**: Ubuntu 20.04+ or equivalent (x64)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
